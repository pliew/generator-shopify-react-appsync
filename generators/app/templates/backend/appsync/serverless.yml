# AppSync Service
#
# This is the serverless.yml for the AppSync service.

service:
  name: <%= appname %>-appsync

# Add the serverless-webpack plugin
plugins:
  # - serverless-webpack
  # - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 256
  timeout: 3
  environment:
    SHOPS_TABLE: "${self:custom.shopsTable}"

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  shopsTable: "${self:service}-shops-${self:custom.stage}"
  cognitoUserPoolId: ${cf:campaignpanel-cognito-${self:custom.stage}.CognitoUserPoolAppUserPoolId}
  cognitoUserPoolArn: ${cf:campaignpanel-cognito-${self:custom.stage}.CognitoUserPoolAppUserPoolArn}
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
    packager: "yarn"

package:
  exclude:
    - .gitignore
    - coverage/**
    - env-example.yml
    - env.yml
    - src/**
    - schema.json
    - serverless.yml
    - templates/**
    - tsconfig.json
    - tslint.json
    - webpack.config.js
    - yarn.lock

functions:

resources:
  Resources:
    ShopsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.shopsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    AppSyncGraphQLApiLogRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "appsync.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          -
            PolicyName: "${self:service}-${self:custom.stage}-${self:custom.region}-appSyncLogRoleLogPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "*"
                -
                  Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: { "Fn::Join" : [":", ["arn:aws:dynamodb:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.shopsTable}" ] ]  }
        RoleName: "${self:service}-${self:custom.stage}-${self:custom.region}-appSyncLogRole"
    AppSyncGraphQLApi:
      Type: AWS::AppSync::GraphQLApi
      Properties:
        UserPoolConfig:
          UserPoolId: ${self:custom.cognitoUserPoolId}
          AwsRegion: ${self:custom.region}
          DefaultAction: ALLOW
        Name: "${self:service}-${self:provider.stage}"
        AuthenticationType: AMAZON_COGNITO_USER_POOLS
        LogConfig:
          CloudWatchLogsRoleArn: { "Fn::GetAtt" : ["AppSyncGraphQLApiLogRole", "Arn"] }
          FieldLogLevel: ERROR
    AppSyncGraphQLSchema:
      Type: AWS::AppSync::GraphQLSchema
      Properties:
        Definition: ${file(templates/schema.graphql)}
        ApiId: { "Fn::GetAtt": [ "AppSyncGraphQLApi", "ApiId" ] }
    AppSyncDataSourceShopsTable:
      Type: AWS::AppSync::DataSource
      Properties:
        Type: AMAZON_DYNAMODB
        ServiceRoleArn: { "Fn::GetAtt" : ["AppSyncGraphQLApiLogRole", "Arn"] }
        ApiId: { "Fn::GetAtt": [ "AppSyncGraphQLApi", "ApiId" ] }
        Name: "shops_${self:custom.stage}"
        DynamoDBConfig:
          TableName: ${self:custom.shopsTable}
          AwsRegion: ${self:custom.region}
          UseCallerCredentials: false
    AppSyncResolverQuerySingleShop:
      Type: AWS::AppSync::Resolver
      Properties:
        TypeName: "Query"
        DataSourceName: "shops_${self:custom.stage}"
        RequestMappingTemplate: ${file(./templates/dynamodb/request/get_item_by_id.vtl)}
        ResponseMappingTemplate: ${file(./templates/dynamodb/response/owner_can_read.vtl)}
        ApiId: { "Fn::GetAtt": [ "AppSyncGraphQLApi", "ApiId" ] }
        FieldName: "shop"
      DependsOn: AppSyncGraphQLSchema

  Outputs:
    ShopsTable:
      Description: "The name of the Shops Table"
      Value:
        Ref: ShopsTable
    ShopsTableArn:
      Description: "The ARN for the Shops Table"
      Value:
        Fn::GetAtt:
          - ShopsTable
          - Arn
